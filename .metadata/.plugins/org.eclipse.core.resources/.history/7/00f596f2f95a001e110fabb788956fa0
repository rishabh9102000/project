package com.cg.Admin.config;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

import com.cg.Admin.services.UserDetailServiceImpl;

@Configuration
@EnableWebSecurity
public class MySecurityConfig  {
	
	@Autowired UserDetailServiceImpl service;
//	@Bean
//	public UserDetailsService userDetailsService() {
//		UserDetails adminUser = User.withUsername("rishabh")
//				.password(passwordEncoder().encode("rishabh"))
//				.roles("ADMIN").build();
//		 UserDetails user1 = User.withUsername("user1")
//		            .password(passwordEncoder().encode("user1"))
//		            .roles("USER")
//		            .build();
//		return new InMemoryUserDetailsManager(user1,adminUser);
//		
//	}
	
	 
	 @Bean
	    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		  AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
	        authenticationManagerBuilder.userDetailsService(service);
	        // Get AuthenticationManager
	       AuthenticationManager authenticationManager = authenticationManagerBuilder.build();
		 
		 http
		 		.csrf((csrf) -> csrf.disable())

	            .authorizeHttpRequests(authorize -> authorize
	                    .requestMatchers("city/**").hasRole("ADMIN").anyRequest().authenticated()
	                    )
//	            .securityMatchers((matchers) -> matchers
//	                    .requestMatchers("/city/**")
//	                   
//	                );
	            .formLogin(formLogin -> formLogin
//	                    .loginPage("/login")
	            		.permitAll()
                );
	        return http.build();
	    }
	 @Bean 
	 public PasswordEncoder passwordEncoder() { 
	 
	     return new BCryptPasswordEncoder(); 
	 }
//	 @Bean
//	    public InMemoryUserDetailsManager userDetailsService() {
//	        UserDetails user1 = User.withUsername("user1")
//	            .password(passwordEncoder().encode("user1Pass"))
//	            .roles("USER")
//	            .build();
//	        UserDetails user2 = User.withUsername("user2")
//	            .password(passwordEncoder().encode("user2Pass"))
//	            .roles("USER")
//	            .build();
//	        UserDetails admin = User.withUsername("admin")
//	            .password(passwordEncoder().encode("adminPass"))
//	            .roles("ADMIN")
//	            .build();
//	        return new InMemoryUserDetailsManager(user1, user2, admin);
//	    }
	//    @Bean
//	    public SecurityFilterChain configure(HttpSecurity http) throws Exception {
//	        // Configure AuthenticationManagerBuilder
//	        AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
//	        authenticationManagerBuilder.userDetailsService(service).passwordEncoder(passwordEncoder());
//	        // Get AuthenticationManager
//	        AuthenticationManager authenticationManager = authenticationManagerBuilder.build();
//	        http
//	        .csrf((csrf) -> csrf.disable())
//
//            .authorizeHttpRequests(authorize -> authorize
//                    .requestMatchers("city/**").hasRole("ADMIN").anyRequest().authenticated()
//                    )
////            .securityMatchers((matchers) -> matchers
////                    .requestMatchers("/city/**")
////                   
////                );
//            .formLogin(formLogin -> formLogin
////                    .loginPage("/login")
//            		.permitAll()
//            );
//	  
//	        return http.build();
//	    }
}
